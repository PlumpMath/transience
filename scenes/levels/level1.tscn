[gd_scene load_steps=15 format=1]

[ext_resource path="res://scenes/levels/level1.gd" type="Script" id=1]
[ext_resource path="res://assets/misc/background.png" type="Texture" id=2]
[ext_resource path="res://scenes/tiles/level1_tileset.tres" type="TileSet" id=3]
[ext_resource path="res://scenes/char/char.tscn" type="PackedScene" id=4]
[ext_resource path="res://scenes/enemies/fighter.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/enemies/jumper.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/ui/ui_bars.tscn" type="PackedScene" id=7]

[sub_resource type="GDScript" id=1]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[sub_resource type="GDScript" id=2]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[sub_resource type="GDScript" id=3]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[sub_resource type="GDScript" id=4]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[sub_resource type="GDScript" id=5]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[sub_resource type="GDScript" id=6]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[sub_resource type="GDScript" id=7]

script/source = "extends \"res://scripts/enemy.gd\"

func _ready():
	set_process(true)
	set_fixed_process(true)

func _process(delta):
	enemy_process(delta)

func _fixed_process(delta):
	# Attack slide motion.
	if current_state == STATE_ATTACK:
		slide_in_dir(get_dir(), delta)

func on_attack_triggered():
	detect_directional_area_attack_collisions(\"char\")
	sample_player.play(\"slice\")
	.on_attack_triggered()

func on_damaged(damage):
	# Fighters are tough. :)
	# If they get hit while in stagger, they won't re-stagger.
	if current_state != STATE_STAGGER:
		.on_damaged(damage)

func get_attack_range():
	return 25

func get_attack_range_buffer():
	return 5

func get_attack_probability():
	return 0.6

func get_attack_cooldown():
	return 0.25 + (randf() / 2)"

[node name="YSort" type="YSort"]

sort/enabled = true
script/script = ExtResource( 1 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

layer = -1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
scroll/offset = Vector2( 0, 0 )
scroll/base_offset = Vector2( 0, 0 )
scroll/base_scale = Vector2( 1, 1 )
scroll/limit_begin = Vector2( 0, 0 )
scroll/limit_end = Vector2( 0, 0 )
scroll/ignore_camera_zoom = true

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]

motion/scale = Vector2( 0.1, 0.1 )
motion/offset = Vector2( 0, 0 )
motion/mirroring = Vector2( 0, 0 )

[node name="Background" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]

transform/pos = Vector2( 32, 80 )
transform/scale = Vector2( 2.5, 2 )
texture = ExtResource( 2 )

[node name="Navigation2D" type="Navigation2D" parent="."]

editor/display_folded = true

[node name="TileMap" type="TileMap" parent="Navigation2D"]

mode = 0
tile_set = ExtResource( 3 )
cell/size = Vector2( 16, 16 )
cell/quadrant_size = 16
cell/custom_transform = Matrix32( 1, 0, 0, 1, 0, 0 )
cell/half_offset = 2
cell/tile_origin = 0
cell/y_sort = false
collision/use_kinematic = false
collision/friction = 1.0
collision/bounce = 0.0
collision/layers = 1
collision/mask = 1
occluder/light_mask = 1
tile_data = IntArray( -65535, 25, -65534, 25, -65533, 25, -65532, 25, -65531, 25, -65530, 25, -65529, 25, 0, 25, 1, 25, 2, 25, 3, 25, 4, 25, 5, 25, 6, 25, 7, 25, 8, 25, 9, 25, 10, 25, 21, 25, 22, 25, 23, 25, 24, 25, 25, 25, 26, 25, 27, 25, 28, 25, 36, 25, 37, 25, 38, 25, 39, 25, 40, 25, 41, 25, 42, 25, 65536, 25, 65537, 14, 65538, 13, 65539, 13, 65540, 13, 65541, 13, 65542, 13, 65543, 16, 65544, 13, 65545, 13, 65546, 14, 65547, 25, 65556, 25, 65557, 13, 65558, 14, 65559, 13, 65560, 13, 65561, 13, 65562, 13, 65563, 13, 65564, 13, 65565, 25, 65566, 25, 65567, 25, 65568, 25, 65569, 25, 65570, 25, 65571, 25, 65572, 13, 65573, 13, 65574, 13, 65575, 13, 65576, 13, 65577, 13, 65578, 13, 65579, 25, 131072, 25, 131073, 13, 131074, 13, 131075, 13, 131076, 13, 131077, 13, 131078, 13, 131079, 13, 131080, 13, 131081, 13, 131082, 13, 131083, 25, 131084, 25, 131085, 25, 131086, 25, 131087, 25, 131088, 25, 131089, 25, 131090, 25, 131091, 25, 131092, 25, 131093, 13, 131094, 13, 131095, 13, 131096, 13, 131097, 13, 131098, 13, 131099, 13, 131100, 13, 131101, 13, 131102, 14, 131103, 13, 131104, 13, 131105, 13, 131106, 13, 131107, 13, 131108, 13, 131109, 13, 131110, 13, 131111, 13, 131112, 13, 131113, 13, 131114, 13, 131115, 25, 262143, 25, 196608, 13, 196609, 13, 196610, 13, 196611, 13, 196612, 13, 196613, 13, 196614, 13, 196615, 13, 196616, 13, 196617, 13, 196618, 13, 196619, 13, 196620, 13, 196621, 13, 196622, 23, 196623, 13, 196624, 13, 196625, 2, 196626, 13, 196627, 14, 196628, 13, 196629, 13, 196630, 13, 196631, 13, 196632, 13, 196633, 13, 196634, 13, 196635, 13, 196636, 13, 196637, 13, 196638, 13, 196639, 13, 196640, 13, 196641, 13, 196642, 13, 196643, 13, 196644, 13, 196645, 13, 196646, 15, 196647, 14, 196648, 13, 196649, 13, 196650, 13, 196651, 25, 327679, 25, 262144, 13, 262145, 0, 262146, 1, 262147, 13, 262148, 13, 262149, 13, 262150, 13, 262151, 13, 262152, 13, 262153, 13, 262154, 13, 262155, 15, 262156, 16, 262157, 13, 262158, 13, 262159, 13, 262160, 13, 262161, 13, 262162, 13, 262163, 13, 262164, 13, 262165, 13, 262166, 13, 262167, 13, 262168, 13, 262169, 13, 262170, 13, 262171, 13, 262172, 13, 262173, 13, 262174, 13, 262175, 13, 262176, 13, 262177, 13, 262178, 13, 262179, 13, 262180, 13, 262181, 13, 262182, 13, 262183, 13, 262184, 13, 262185, 13, 262186, 13, 262187, 25, 393215, 25, 327680, 13, 327681, 2, 327682, 3, 327683, 13, 327684, 13, 327685, 15, 327686, 14, 327687, 13, 327688, 13, 327689, 13, 327690, 13, 327691, 13, 327692, 13, 327693, 13, 327694, 13, 327695, 13, 327696, 13, 327697, 13, 327698, 13, 327699, 13, 327700, 13, 327701, 13, 327702, 13, 327703, 4, 327704, 7, 327705, 13, 327706, 13, 327707, 13, 327708, 15, 327709, 16, 327710, 13, 327711, 13, 327712, 13, 327713, 13, 327714, 13, 327715, 13, 327716, 13, 327717, 13, 327718, 13, 327719, 13, 327720, 13, 327721, 13, 327722, 13, 327723, 25, 458751, 25, 393216, 13, 393217, 13, 393218, 13, 393219, 13, 393220, 13, 393221, 13, 393222, 13, 393223, 13, 393224, 13, 393225, 13, 393226, 13, 393227, 13, 393228, 13, 393229, 13, 393230, 13, 393231, 13, 393232, 13, 393233, 13, 393234, 13, 393235, 13, 393236, 15, 393237, 16, 393238, 13, 393239, 5, 393240, 6, 393241, 13, 393242, 13, 393243, 13, 393244, 13, 393245, 13, 393246, 13, 393247, 13, 393248, 13, 393249, 13, 393250, 13, 393251, 13, 393252, 13, 393253, 13, 393254, 13, 393255, 13, 393256, 13, 393257, 13, 393258, 13, 393259, 25, 524287, 25, 458752, 13, 458753, 13, 458754, 13, 458755, 16, 458756, 13, 458757, 13, 458758, 13, 458759, 13, 458760, 13, 458761, 13, 458762, 13, 458763, 13, 458764, 13, 458765, 13, 458766, 13, 458767, 13, 458768, 14, 458769, 13, 458770, 13, 458771, 13, 458772, 13, 458773, 13, 458774, 13, 458775, 13, 458776, 13, 458777, 13, 458778, 13, 458779, 13, 458780, 13, 458781, 23, 458782, 13, 458783, 13, 458784, 13, 458785, 13, 458786, 13, 458787, 13, 458788, 13, 458789, 13, 458790, 13, 458791, 13, 458792, 13, 458793, 13, 458794, 13, 458795, 25, 524288, 17, 524289, 18, 524290, 13, 524291, 13, 524292, 13, 524293, 13, 524294, 13, 524295, 14, 524296, 13, 524297, 13, 524298, 13, 524299, 13, 524300, 13, 524301, 13, 524302, 13, 524303, 13, 524304, 13, 524305, 13, 524306, 13, 524307, 13, 524308, 1, 524309, 19, 524310, 17, 524311, 18, 524312, 17, 524313, 20, 524314, 18, 524315, 19, 524316, 19, 524317, 17, 524318, 19, 524319, 22, 524320, 18, 524321, 13, 524322, 13, 524323, 13, 524324, 17, 524325, 19, 524326, 17, 524327, 18, 524328, 20, 524329, 17, 524330, 18, 589826, 19, 589827, 17, 589828, 13, 589829, 13, 589830, 13, 589831, 13, 589832, 13, 589833, 13, 589834, 19, 589835, 19, 589836, 17, 589837, 18, 589838, 17, 589839, 22, 589840, 18, 589841, 19, 589842, 19, 589843, 18, 589844, 17, 589856, 25, 589857, 13, 589858, 13, 589859, 13, 589860, 25, 655364, 19, 655365, 17, 655366, 19, 655367, 19, 655368, 18, 655369, 17, 655392, 25, 655393, 13, 655394, 13, 655395, 13, 655396, 25, 655397, 25, 655398, 25, 655399, 25, 655400, 25, 720928, 25, 720929, 13, 720930, 13, 720931, 13, 720932, 13, 720933, 13, 720934, 13, 720935, 13, 720936, 13, 720937, 25, 786464, 25, 786465, 13, 786466, 13, 786467, 13, 786468, 13, 786469, 13, 786470, 13, 786471, 13, 786472, 13, 786473, 25, 786496, 25, 786497, 25, 786498, 25, 852000, 25, 852001, 14, 852002, 13, 852003, 13, 852004, 13, 852005, 13, 852006, 13, 852007, 13, 852008, 13, 852009, 25, 852031, 25, 852032, 13, 852033, 13, 852034, 13, 852035, 25, 917537, 18, 917538, 17, 917539, 20, 917540, 19, 917541, 17, 917542, 13, 917543, 13, 917544, 13, 917545, 25, 917566, 25, 917567, 13, 917568, 0, 917569, 13, 917570, 1, 917571, 13, 917572, 25, 983077, 25, 983078, 13, 983079, 14, 983080, 13, 983081, 25, 983101, 25, 983102, 13, 983103, 13, 983104, 13, 983105, 13, 983106, 13, 983107, 13, 983108, 14, 983109, 25, 1048613, 25, 1048614, 13, 1048615, 13, 1048616, 13, 1048617, 25, 1048637, 25, 1048638, 13, 1048639, 13, 1048640, 13, 1048641, 13, 1048642, 13, 1048643, 13, 1048644, 13, 1048645, 25, 1114148, 25, 1114149, 25, 1114150, 13, 1114151, 13, 1114152, 13, 1114153, 25, 1114154, 25, 1114173, 25, 1114174, 14, 1114175, 13, 1114176, 13, 1114177, 13, 1114178, 13, 1114179, 13, 1114180, 13, 1114181, 25, 1179681, 25, 1179682, 25, 1179683, 25, 1179684, 16, 1179685, 13, 1179686, 13, 1179687, 13, 1179688, 13, 1179689, 13, 1179690, 13, 1179691, 25, 1179692, 25, 1179710, 21, 1179711, 19, 1179712, 13, 1179713, 13, 1179714, 13, 1179715, 17, 1179716, 21, 1245216, 25, 1245217, 13, 1245218, 13, 1245219, 13, 1245220, 13, 1245221, 13, 1245222, 13, 1245223, 13, 1245224, 15, 1245225, 13, 1245226, 13, 1245227, 13, 1245228, 2, 1245229, 25, 1245230, 25, 1245231, 25, 1245232, 25, 1245233, 25, 1245234, 25, 1245247, 25, 1245248, 13, 1245249, 13, 1245250, 13, 1245251, 25, 1310749, 25, 1310750, 25, 1310751, 25, 1310752, 25, 1310753, 13, 1310754, 13, 1310755, 13, 1310756, 13, 1310757, 13, 1310758, 13, 1310759, 13, 1310760, 13, 1310761, 13, 1310762, 13, 1310763, 13, 1310764, 13, 1310765, 13, 1310766, 13, 1310767, 13, 1310768, 13, 1310769, 13, 1310770, 13, 1310771, 25, 1310783, 25, 1310784, 13, 1310785, 13, 1310786, 13, 1310787, 25, 1376282, 25, 1376283, 25, 1376284, 25, 1376285, 13, 1376286, 13, 1376287, 13, 1376288, 13, 1376289, 13, 1376290, 13, 1376291, 13, 1376292, 13, 1376293, 13, 1376294, 13, 1376295, 13, 1376296, 13, 1376297, 13, 1376298, 13, 1376299, 13, 1376300, 13, 1376301, 13, 1376302, 13, 1376303, 13, 1376304, 14, 1376305, 13, 1376306, 13, 1376307, 25, 1376308, 25, 1376309, 25, 1376319, 25, 1376320, 13, 1376321, 13, 1376322, 13, 1376323, 25, 1441817, 25, 1441818, 13, 1441819, 13, 1441820, 13, 1441821, 13, 1441822, 13, 1441823, 14, 1441824, 13, 1441825, 13, 1441826, 13, 1441827, 13, 1441828, 13, 1441829, 13, 1441830, 13, 1441831, 13, 1441832, 13, 1441833, 16, 1441834, 13, 1441835, 13, 1441836, 13, 1441837, 13, 1441838, 13, 1441839, 13, 1441840, 13, 1441841, 13, 1441842, 13, 1441843, 13, 1441844, 13, 1441845, 13, 1441846, 25, 1441847, 25, 1441848, 25, 1441849, 25, 1441850, 25, 1441851, 25, 1441852, 25, 1441853, 25, 1441854, 25, 1441855, 25, 1441856, 13, 1441857, 13, 1441858, 15, 1441859, 25, 1507353, 25, 1507354, 13, 1507355, 13, 1507356, 13, 1507357, 13, 1507358, 13, 1507359, 13, 1507360, 13, 1507361, 13, 1507362, 13, 1507363, 13, 1507364, 13, 1507365, 13, 1507366, 13, 1507367, 13, 1507368, 13, 1507369, 13, 1507370, 13, 1507371, 13, 1507372, 13, 1507373, 13, 1507374, 13, 1507375, 13, 1507376, 13, 1507377, 13, 1507378, 13, 1507379, 13, 1507380, 13, 1507381, 13, 1507382, 13, 1507383, 13, 1507384, 13, 1507385, 13, 1507386, 13, 1507387, 13, 1507388, 13, 1507389, 13, 1507390, 13, 1507391, 13, 1507392, 13, 1507393, 13, 1507394, 13, 1507395, 25, 1572889, 25, 1572890, 13, 1572891, 13, 1572892, 13, 1572893, 13, 1572894, 13, 1572895, 13, 1572896, 13, 1572897, 13, 1572898, 13, 1572899, 13, 1572900, 13, 1572901, 13, 1572902, 4, 1572903, 10, 1572904, 7, 1572905, 13, 1572906, 13, 1572907, 13, 1572908, 13, 1572909, 13, 1572910, 13, 1572911, 13, 1572912, 13, 1572913, 13, 1572914, 13, 1572915, 13, 1572916, 13, 1572917, 13, 1572918, 13, 1572919, 13, 1572920, 13, 1572921, 13, 1572922, 13, 1572923, 13, 1572924, 13, 1572925, 13, 1572926, 13, 1572927, 13, 1572928, 13, 1572929, 13, 1572930, 13, 1572931, 25, 1638425, 25, 1638426, 13, 1638427, 13, 1638428, 13, 1638429, 13, 1638430, 23, 1638431, 23, 1638432, 13, 1638433, 13, 1638434, 15, 1638435, 16, 1638436, 13, 1638437, 13, 1638438, 8, 1638439, 12, 1638440, 9, 1638441, 13, 1638442, 13, 1638443, 13, 1638444, 13, 1638445, 13, 1638446, 13, 1638447, 13, 1638448, 13, 1638449, 13, 1638450, 13, 1638451, 13, 1638452, 13, 1638453, 13, 1638454, 13, 1638455, 13, 1638456, 13, 1638457, 13, 1638458, 13, 1638459, 13, 1638460, 14, 1638461, 13, 1638462, 13, 1638463, 13, 1638464, 13, 1638465, 13, 1638466, 24, 1638467, 25, 1703962, 17, 1703963, 13, 1703964, 13, 1703965, 23, 1703966, 13, 1703967, 13, 1703968, 23, 1703969, 13, 1703970, 13, 1703971, 13, 1703972, 13, 1703973, 13, 1703974, 5, 1703975, 11, 1703976, 6, 1703977, 13, 1703978, 13, 1703979, 13, 1703980, 13, 1703981, 13, 1703982, 13, 1703983, 13, 1703984, 13, 1703985, 13, 1703986, 13, 1703987, 13, 1703988, 13, 1703989, 13, 1703990, 19, 1703991, 17, 1703992, 20, 1703993, 18, 1703994, 19, 1703995, 19, 1703996, 22, 1703997, 18, 1703998, 17, 1703999, 17, 1704000, 19, 1704001, 18, 1704002, 19, 1769498, 25, 1769499, 13, 1769500, 13, 1769501, 13, 1769502, 13, 1769503, 13, 1769504, 13, 1769505, 13, 1769506, 13, 1769507, 13, 1769508, 13, 1769509, 13, 1769510, 13, 1769511, 13, 1769512, 13, 1769513, 13, 1769514, 13, 1769515, 13, 1769516, 13, 1769517, 13, 1769518, 13, 1769519, 13, 1769520, 13, 1769521, 13, 1769522, 13, 1769523, 13, 1769524, 19, 1769525, 18, 1835034, 25, 1835035, 13, 1835036, 13, 1835037, 13, 1835038, 13, 1835039, 13, 1835040, 13, 1835041, 13, 1835042, 13, 1835043, 13, 1835044, 13, 1835045, 13, 1835046, 13, 1835047, 13, 1835048, 13, 1835049, 13, 1835050, 13, 1835051, 13, 1835052, 13, 1835053, 13, 1835054, 13, 1835055, 13, 1835056, 13, 1835057, 13, 1835058, 13, 1835059, 22, 1900571, 19, 1900572, 17, 1900573, 18, 1900574, 13, 1900575, 13, 1900576, 13, 1900577, 13, 1900578, 13, 1900579, 13, 1900580, 13, 1900581, 13, 1900582, 13, 1900583, 13, 1900584, 13, 1900585, 13, 1900586, 13, 1900587, 13, 1900588, 13, 1900589, 13, 1900590, 13, 1900591, 13, 1900592, 13, 1900593, 18, 1900594, 17, 1966109, 25, 1966110, 13, 1966111, 13, 1966112, 13, 1966113, 13, 1966114, 13, 1966115, 14, 1966116, 13, 1966117, 13, 1966118, 13, 1966119, 13, 1966120, 13, 1966121, 13, 1966122, 13, 1966123, 13, 1966124, 14, 1966125, 13, 1966126, 13, 1966127, 13, 1966128, 13, 2031645, 25, 2031646, 13, 2031647, 13, 2031648, 13, 2031649, 13, 2031650, 13, 2031651, 13, 2031652, 13, 2031653, 13, 2031654, 13, 2031655, 13, 2031656, 13, 2031657, 13, 2031658, 13, 2031659, 13, 2031660, 13, 2031661, 13, 2031662, 18, 2031663, 18, 2031664, 19, 2097182, 20, 2097183, 17, 2097184, 13, 2097185, 3, 2097186, 13, 2097187, 13, 2097188, 13, 2097189, 13, 2097190, 13, 2097191, 13, 2097192, 13, 2097193, 13, 2097194, 13, 2097195, 13, 2097196, 13, 2097197, 13, 2162720, 18, 2162721, 17, 2162722, 17, 2162723, 18, 2162724, 19, 2162725, 13, 2162726, 13, 2162727, 13, 2162728, 13, 2162729, 18, 2162730, 17, 2162731, 19, 2162732, 17, 2162733, 17, 2228260, 25, 2228261, 13, 2228262, 13, 2228263, 13, 2228264, 13, 2228265, 25, 2293796, 25, 2293797, 13, 2293798, 13, 2293799, 13, 2293800, 13, 2293801, 25, 2359330, 25, 2359331, 25, 2359332, 13, 2359333, 13, 2359334, 13, 2359335, 13, 2359336, 13, 2359337, 25, 2424865, 25, 2424866, 13, 2424867, 13, 2424868, 13, 2424869, 13, 2424870, 13, 2424871, 13, 2424872, 14, 2424873, 25, 2490400, 25, 2490401, 13, 2490402, 13, 2490403, 13, 2490404, 13, 2490405, 13, 2490406, 13, 2490407, 13, 2490408, 19, 2555935, 25, 2555936, 13, 2555937, 13, 2555938, 13, 2555939, 13, 2555940, 13, 2555941, 13, 2555942, 18, 2555943, 17, 2621471, 25, 2621472, 13, 2621473, 13, 2621474, 13, 2621475, 13, 2621476, 13, 2621477, 19, 2687006, 25, 2687007, 13, 2687008, 13, 2687009, 13, 2687010, 13, 2687011, 13, 2687012, 17, 2752540, 25, 2752541, 25, 2752542, 13, 2752543, 13, 2752544, 13, 2752545, 13, 2752546, 13, 2752547, 13, 2752548, 13, 2752549, 13, 2752550, 25, 2752551, 25, 2818075, 25, 2818076, 13, 2818077, 13, 2818078, 13, 2818079, 13, 2818080, 13, 2818081, 13, 2818082, 13, 2818083, 13, 2818084, 13, 2818085, 13, 2818086, 13, 2818087, 13, 2818088, 25, 2883611, 25, 2883612, 13, 2883613, 13, 2883614, 13, 2883615, 13, 2883616, 14, 2883617, 13, 2883618, 13, 2883619, 13, 2883620, 13, 2883621, 13, 2883622, 13, 2883623, 13, 2883624, 13, 2883625, 25, 2949146, 25, 2949147, 13, 2949148, 13, 2949149, 13, 2949150, 13, 2949151, 13, 2949152, 13, 2949153, 13, 2949154, 13, 2949155, 13, 2949156, 13, 2949157, 13, 2949158, 13, 2949159, 13, 2949160, 13, 2949161, 13, 2949162, 25, 3014682, 25, 3014683, 13, 3014684, 13, 3014685, 13, 3014686, 24, 3014687, 13, 3014688, 13, 3014689, 0, 3014690, 13, 3014691, 1, 3014692, 13, 3014693, 13, 3014694, 24, 3014695, 13, 3014696, 13, 3014697, 13, 3014698, 25, 3080218, 25, 3080219, 13, 3080220, 13, 3080221, 13, 3080222, 24, 3080223, 13, 3080224, 13, 3080225, 13, 3080226, 12, 3080227, 13, 3080228, 13, 3080229, 13, 3080230, 24, 3080231, 13, 3080232, 13, 3080233, 14, 3080234, 25, 3145755, 19, 3145756, 13, 3145757, 14, 3145758, 13, 3145759, 13, 3145760, 16, 3145761, 2, 3145762, 13, 3145763, 3, 3145764, 13, 3145765, 13, 3145766, 13, 3145767, 13, 3145768, 13, 3145769, 13, 3145770, 25, 3211291, 25, 3211292, 13, 3211293, 13, 3211294, 13, 3211295, 13, 3211296, 13, 3211297, 13, 3211298, 13, 3211299, 13, 3211300, 13, 3211301, 13, 3211302, 13, 3211303, 13, 3211304, 13, 3211305, 18, 3276828, 17, 3276829, 13, 3276830, 13, 3276831, 13, 3276832, 13, 3276833, 13, 3276834, 13, 3276835, 13, 3276836, 13, 3276837, 13, 3276838, 13, 3276839, 13, 3276840, 19, 3342365, 19, 3342366, 17, 3342367, 13, 3342368, 13, 3342369, 13, 3342370, 13, 3342371, 13, 3342372, 13, 3342373, 16, 3342374, 19, 3342375, 18, 3407903, 18, 3407904, 19, 3407905, 20, 3407906, 17, 3407907, 17, 3407908, 19, 3407909, 20 )

[node name="Char" parent="." instance=ExtResource( 4 )]

transform/pos = Vector2( 32.0298, 68.6773 )
ATTACK_DAMAGE = 20

[node name="Fighter1" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 648, 80 )
script/script = SubResource( 1 )
ATTACK_SLIDE_SPEED = 10

[node name="Jumper" parent="." instance=ExtResource( 6 )]

transform/pos = Vector2( 1048, 232 )
ATTACK_SLIDE_SPEED = 15

[node name="Fighter2" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 512, 456 )
script/script = SubResource( 2 )
ATTACK_SLIDE_SPEED = 10

[node name="Fighter3" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 792, 352 )
script/script = SubResource( 3 )
ATTACK_SLIDE_SPEED = 10

[node name="Fighter4" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 752, 464 )
script/script = SubResource( 4 )
ATTACK_SLIDE_SPEED = 10

[node name="Fighter5" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 552, 760 )
script/script = SubResource( 5 )
ATTACK_SLIDE_SPEED = 10

[node name="Fighter6" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 536, 760 )
script/script = SubResource( 6 )
ATTACK_SLIDE_SPEED = 10

[node name="Fighter7" parent="." instance=ExtResource( 5 )]

transform/pos = Vector2( 568, 760 )
script/script = SubResource( 7 )
ATTACK_SLIDE_SPEED = 10

[node name="CanvasLayer" parent="." instance=ExtResource( 7 )]


